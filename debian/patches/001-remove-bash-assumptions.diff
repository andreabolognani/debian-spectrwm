Description: Remove Bash assumptions
 The example baraction.sh script shipped in scrotwm's release relies on
 some non-POSIX shell features.
 .
 This patch modifies the script so that it is possible to run it on a
 POSIX-compliant shell. The patched script still relies on a bunch of
 OpenBSD-specific features, which are taken care of in a different patch.
Bug-Debian: http://bugs.debian.org/530990
Forwarded: Marco Peereboom <marco@peereboom.us>
Author: Andrea Bolognani <eof@kiyuko.org>
Last-Update: 2010-07-21
Index: scrotwm.git/baraction.sh
===================================================================
--- scrotwm.git.orig/baraction.sh	2010-07-21 18:32:30.875700721 +0200
+++ scrotwm.git/baraction.sh	2010-07-21 18:34:51.811816884 +0200
@@ -2,6 +2,10 @@
 #
 # $scrotwm: baraction.sh,v 1.17 2010/07/01 19:49:37 marco Exp $
 
+APM="/usr/sbin/apm -alb"
+IOSTAT="/usr/sbin/iostat -c -C 3600"   # wish infinity was an option
+TOP="/usr/bin/top"
+
 print_date() {
 	# The date is printed to the status bar by default.
 	# To print the date through this script, set clock_enabled to 0
@@ -12,7 +16,7 @@
 }
 
 print_mem() {
-	MEM=`/usr/bin/top | grep Free: | cut -d " " -f7`
+	MEM=`${TOP} | grep Free: | cut -d " " -f7`
 	echo -n "Free mem: $MEM  "
 }
 
@@ -84,19 +88,20 @@
 while :; do
 	# instead of sleeping, use iostat as the update timer.
 	# cache the output of apm(8), no need to call that every second.
-	/usr/sbin/iostat -C -c 3600 |&	# wish infinity was an option
-	PID="$!"
-	APM_DATA=""
 	I=0
-	trap "kill $PID; exit" TERM
-	while read -p; do
-		if [ $(( ${I} % 1 )) -eq 0 ]; then
-			APM_DATA=`/usr/sbin/apm -alb`
+	${IOSTAT} 2>&1 |
+	while read IOSTAT_DATA; do
+		if [ ${I} -eq 0 ]; then
+			PID="$!"
+			trap "kill $PID; exit" TERM
+		fi
+		if [ $(( ${I} % 10 )) -eq 0 ]; then
+			APM_DATA=`${APM}`
 		fi
 		if [ $I -gt 2 ]; then
 			# print_date
-			print_mem $MEM
-			print_cpu $REPLY
+			print_mem
+			print_cpu $IOSTAT_DATA
 			print_cpuspeed
 			print_apm $APM_DATA
 			echo ""
