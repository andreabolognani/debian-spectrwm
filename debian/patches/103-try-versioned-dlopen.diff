Description: Try versioned dlopen()
 libswmhack.so tries to dlopen() libX11.so and libXt.so, but these symlinks
 are available only if the corresponding -dev package is installed.
 .
 If dlopen() fails, try with libX11.so.6 and libXt.so.6. If even that fails,
 print an explanatory error message and abort the process.
Bug-Debian: http://bugs.debian.org/551732
Author: Andrea Bolognani <eof@kiyuko.org>
Last-Update: 2009-11-02
Index: spectrwm.git/lib/swm_hack.c
===================================================================
--- spectrwm.git.orig/lib/swm_hack.c	2012-02-19 19:34:10.263426784 +0100
+++ spectrwm.git/lib/swm_hack.c	2012-02-19 21:45:49.232334232 +0100
@@ -44,6 +44,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <dlfcn.h>
+#include <assert.h>
 #include <X11/Xlib.h>
 #include <X11/X.h>
 #include <X11/Xatom.h>
@@ -129,12 +130,29 @@
 	static CWF	*func = NULL;
 	char		*env;
 	Window		id;
+	char		*error;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
 		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		lib_xlib = dlopen("libX11.so.6", RTLD_GLOBAL | RTLD_LAZY);
+
+	if (!lib_xlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xlib);
+		}
+
 	if (!func) {
 		func = (CWF *) dlsym(lib_xlib, "XCreateWindow");
+
+		if (!func)
+			if ((error = dlerror()) != NULL) {
+				fprintf(stderr, "%s\n", error);
+				assert(func);
+			}
+
 		dpy = display;
 	}
 
@@ -174,13 +192,29 @@
 	static CSWF	*func = NULL;
 	char		*env;
 	Window		id;
+	char		*error;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
 		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		lib_xlib = dlopen("libX11.so.6", RTLD_GLOBAL | RTLD_LAZY);
+
+	if (!lib_xlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xlib);
+		}
+
 	if (!func)
 		func = (CSWF *) dlsym(lib_xlib, "XCreateSimpleWindow");
 
+	if (!func)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(func);
+		}
+
 	if (parent == DefaultRootWindow(display))
 		parent = MyRoot(display);
 
@@ -208,13 +242,29 @@
 XReparentWindow(Display * display, Window window, Window parent, int x, int y)
 {
 	static RWF         *func = NULL;
+	char				*error;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
 		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		lib_xlib = dlopen("libX11.so.6", RTLD_GLOBAL | RTLD_LAZY);
+
+	if (!lib_xlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xlib);
+		}
+
 	if (!func)
 		func = (RWF *) dlsym(lib_xlib, "XReparentWindow");
 
+	if (!func)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(func);
+		}
+
 	if (parent == DefaultRootWindow(display))
 		parent = MyRoot(display);
 
@@ -235,12 +285,30 @@
 {
 	static ANEF	*func = NULL;
 	static int	kp_add = 0, kp_subtract = 0;
+	char		*error;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xtlib)
+		lib_xtlib = dlopen("libXt.so.6", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xtlib)
 		lib_xtlib = dlopen("libXt.so", RTLD_GLOBAL | RTLD_LAZY);
+
+	if (!lib_xtlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xtlib);
+		}
+
 	if (!func) {
 		func = (ANEF *) dlsym(lib_xtlib, "XtAppNextEvent");
+
+		if (!func) {
+			if ((error = dlerror()) != NULL) {
+				fprintf(stderr, "%s\n", error);
+				assert(func);
+			}
+		}
+
 		if (dpy != NULL) {
 			kp_add = XKeysymToKeycode(dpy, XK_KP_Add);
 			kp_subtract = XKeysymToKeycode(dpy, XK_KP_Subtract);
