Description: Try versioned dlopen()
 libswmhack.so tries to dlopen() libX11.so and libXt.so, but these symlinks
 are available only if the corresponding -dev package is installed.
 .
 If dlopen() fails, try with libX11.so.6 and libXt.so.6. If even that fails,
 print an explanatory error message and abort the process.
Bug-Debian: http://bugs.debian.org/551732
Author: Andrea Bolognani <eof@kiyuko.org>
Last-Update: 2014-04-11
Index: spectrwm.git/lib/swm_hack.c
===================================================================
--- spectrwm.git.orig/lib/swm_hack.c	2014-04-11 20:37:18.000000000 +0200
+++ spectrwm.git/lib/swm_hack.c	2014-04-11 21:00:53.800030989 +0200
@@ -44,6 +44,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <dlfcn.h>
+#include <assert.h>
 #include <X11/Xlib.h>
 #include <X11/X.h>
 #include <X11/Xatom.h>
@@ -90,16 +91,36 @@
 {
 	Atom			atom = 0;
 	char			prop[SWM_PROPLEN];
+	char			*error;
 	static XIA		*xia = NULL;
 	static XCP		*xcp = NULL;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
 		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		lib_xlib = dlopen("libX11.so.6", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xlib);
+		}
+
 	if (!xia)
 		xia = (XIA *) dlsym(lib_xlib, "XInternAtom");
+	if (!xia)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(xia);
+		}
+
 	if (!xcp)
 		xcp = (XCP *) dlsym(lib_xlib, "XChangeProperty");
+	if (!xcp)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(xcp);
+		}
 
 	/* Try to update the window's workspace property */
 	atom = (*xia)(dpy, name, False);
@@ -128,15 +149,29 @@
 {
 	static CWF	*func = NULL;
 	char		*env;
+	char		*error;
 	Window		id;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
 		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		lib_xlib = dlopen("libX11.so.6", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xlib);
+		}
+
 	if (!func) {
 		func = (CWF *) dlsym(lib_xlib, "XCreateWindow");
 		display = dpy;
 	}
+	if (!func)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(func);
+		}
 
 	if (parent == DefaultRootWindow(dpy))
 		parent = MyRoot(dpy);
@@ -173,13 +208,27 @@
 {
 	static CSWF	*func = NULL;
 	char		*env;
+	char		*error;
 	Window		id;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
 		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		lib_xlib = dlopen("libX11.so.6", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xlib);
+		}
+
 	if (!func)
 		func = (CSWF *) dlsym(lib_xlib, "XCreateSimpleWindow");
+	if (!func)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(func);
+		}
 
 	if (parent == DefaultRootWindow(dpy))
 		parent = MyRoot(dpy);
@@ -208,12 +257,26 @@
 XReparentWindow(Display *dpy, Window window, Window parent, int x, int y)
 {
 	static RWF         *func = NULL;
+	char               *error;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
 		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		lib_xlib = dlopen("libX11.so.6", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xlib);
+		}
+
 	if (!func)
 		func = (RWF *) dlsym(lib_xlib, "XReparentWindow");
+	if (!func)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(func);
+		}
 
 	if (parent == DefaultRootWindow(dpy))
 		parent = MyRoot(dpy);
@@ -235,10 +298,19 @@
 {
 	static ANEF	*func = NULL;
 	static KeyCode	kp_add = 0, kp_subtract = 0;
+	char		*error;
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xtlib)
 		lib_xtlib = dlopen("libXt.so", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xtlib)
+		lib_xtlib = dlopen("libXt.so.6", RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib_xtlib)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(lib_xtlib);
+		}
+
 	if (!func) {
 		func = (ANEF *) dlsym(lib_xtlib, "XtAppNextEvent");
 		if (display != NULL) {
@@ -246,6 +318,11 @@
 			kp_subtract = XKeysymToKeycode(display, XK_KP_Subtract);
 		}
 	}
+	if (!func)
+		if ((error = dlerror()) != NULL) {
+			fprintf(stderr, "%s\n", error);
+			assert(func);
+		}
 
 	(*func) (app_context, event_return);
 
