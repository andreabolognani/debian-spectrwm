Description: Improve libswmhack
 libswmhack tries to dlopen() libX11.so and libXt.so, but on Linux those
 are symlinks shipped in the corresponding -dev package.
 .
 If dlopen() fails, try with the versioned library names, libX11.so.6 and
 libXt.so.6. If even that fails, print an explanatory error message and
 exit() the process.
 .
 Apply the same error checking when calling dlsym() to load functions as
 well.
Bug-Debian: http://bugs.debian.org/551732
Bug: https://github.com/conformal/spectrwm/pull/63
Author: Andrea Bolognani <eof@kiyuko.org>
Last-Update: 2014-08-27
Index: spectrwm.git/lib/swm_hack.c
===================================================================
--- spectrwm.git.orig/lib/swm_hack.c	2014-08-27 22:05:59.496292521 +0200
+++ spectrwm.git/lib/swm_hack.c	2014-08-27 22:18:26.888328699 +0200
@@ -1,6 +1,7 @@
 /*
  * Copyright (c) 2009 Marco Peereboom <marco@peereboom.us>
  * Copyright (c) 2009 Ryan McBride <mcbride@countersiege.com>
+ * Copyright (c) 2014 Andrea Bolognani <eof@kiyuko.org>
  *
  * Permission to use, copy, modify, and distribute this software for any
  * purpose with or without fee is hereby granted, provided that the above
@@ -49,6 +50,9 @@
 #include <X11/Xatom.h>
 #include <X11/Intrinsic.h>
 
+/* X11 libraries major version as a string */
+#define X11_LIB_MAJOR "6"
+
 /* dlopened libs so we can find the symbols in the real one to call them */
 static void		*lib_xlib = NULL;
 static void		*lib_xtlib = NULL;
@@ -58,6 +62,55 @@
 static Display		*display = NULL;
 
 void	set_property(Display *, Window, char *, char *);
+void*	actual_lib(char *);
+void*	actual_func(void *, char *);
+
+/* Obtain pointer to actual library */
+void *
+actual_lib(char *lname)
+{
+	void	*lib = NULL;
+	char	*vlname;
+	char	*error;
+	int	len;
+
+	lib = dlopen(lname, RTLD_GLOBAL | RTLD_LAZY);
+	if (!lib) {
+		/* Versioned library name */
+		len = strlen(lname) + strlen(X11_LIB_MAJOR) + 2;
+		vlname = calloc(len, sizeof(char));
+		snprintf(vlname, len, "%s.%s", lname, X11_LIB_MAJOR);
+
+		lib = dlopen(vlname, RTLD_GLOBAL | RTLD_LAZY);
+		free(vlname);
+	}
+	if (!lib) {
+		fprintf(stderr, "actual_lib: failed for %s, exiting\n", lname);
+		if ((error = dlerror()) != NULL)
+			fprintf(stderr, "%s\n", error);
+		exit(1);
+	}
+
+	return lib;
+}
+
+/* Obtain pointer to actual function */
+void *
+actual_func(void *lib, char *fname)
+{
+	void	*func = NULL;
+	char	*error;
+
+	func = dlsym(lib, fname);
+	if (!func) {
+		fprintf(stderr, "actual_func: failed for %s, extiting\n", fname);
+		if ((error = dlerror()) != NULL)
+			fprintf(stderr, "%s\n", error);
+		exit(1);
+	}
+
+	return func;
+}
 
 /* Find our root window */
 static              Window
@@ -97,11 +150,11 @@
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
-		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+		lib_xlib = actual_lib("libX11.so");
 	if (!xia)
-		xia = (XIA *) dlsym(lib_xlib, "XInternAtom");
+		xia = (XIA *) actual_func(lib_xlib, "XInternAtom");
 	if (!xcp)
-		xcp = (XCP *) dlsym(lib_xlib, "XChangeProperty");
+		xcp = (XCP *) actual_func(lib_xlib, "XChangeProperty");
 
 	/* Try to update the window's workspace property */
 	atom = (*xia)(dpy, name, False);
@@ -134,9 +187,9 @@
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
-		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+		lib_xlib = actual_lib("libX11.so");
 	if (!func) {
-		func = (CWF *) dlsym(lib_xlib, "XCreateWindow");
+		func = (CWF *) actual_func(lib_xlib, "XCreateWindow");
 		display = dpy;
 	}
 
@@ -179,9 +232,9 @@
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
-		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+		lib_xlib = actual_lib("libX11.so");
 	if (!func)
-		func = (CSWF *) dlsym(lib_xlib, "XCreateSimpleWindow");
+		func = (CSWF *) actual_func(lib_xlib, "XCreateSimpleWindow");
 
 	if (parent == DefaultRootWindow(dpy))
 		parent = MyRoot(dpy);
@@ -213,9 +266,9 @@
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xlib)
-		lib_xlib = dlopen("libX11.so", RTLD_GLOBAL | RTLD_LAZY);
+		lib_xlib = actual_lib("libX11.so");
 	if (!func)
-		func = (RWF *) dlsym(lib_xlib, "XReparentWindow");
+		func = (RWF *) actual_func(lib_xlib, "XReparentWindow");
 
 	if (parent == DefaultRootWindow(dpy))
 		parent = MyRoot(dpy);
@@ -240,9 +293,9 @@
 
 	/* find the real Xlib and the real X function */
 	if (!lib_xtlib)
-		lib_xtlib = dlopen("libXt.so", RTLD_GLOBAL | RTLD_LAZY);
+		lib_xtlib = actual_lib("libXt.so");
 	if (!func) {
-		func = (ANEF *) dlsym(lib_xtlib, "XtAppNextEvent");
+		func = (ANEF *) actual_func(lib_xtlib, "XtAppNextEvent");
 		if (display != NULL) {
 			kp_add = XKeysymToKeycode(display, XK_KP_Add);
 			kp_subtract = XKeysymToKeycode(display, XK_KP_Subtract);
